'''Given a string s, find the length of the longest 
substring
 without repeating characters.'''

 

'''Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.'''



#MY SOLUTION 
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        lenght = 0  #Lenght of the longest substring
        l = 0       #left pointer
        seen = {}   #stores the character and its last seen index as the key-value pair
        
        for r in range(len(s)):
            character = s[r]

            if character in seen and seen[character]>=l:
                l = seen[character]+1
            else:
                lenght = max(lenght, r-l+1)

            seen[character]=r

        return lenght
